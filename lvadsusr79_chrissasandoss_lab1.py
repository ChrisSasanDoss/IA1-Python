# -*- coding: utf-8 -*-
"""lvadsusr79_ChrisSasanDoss_Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lDxejos7aphImwyraVWsNGE8ZIjqxO7m
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.metrics import r2_score, mean_squared_error
import seaborn as sns

df=pd.read_csv('/content/expenses.csv')
#Printing columns of dataset
print('\nColumns: ',df.columns)

#Printing head of dataset
print('\nHead: ',df.head)

#Printing tail of dataset
print('\nTail: ',df.tail)

#Counting null values
n=df.isnull().sum()
print('\nNull value count: ',n)

#Dropping duplicate rows
df=df.drop_duplicates()

#Removing outliers
Q1=df['bmi'].quantile(0.25)
Q3=df['bmi'].quantile(0.75)
IQR=Q3-Q1
lower_limit=Q1-(1.5*IQR)
upper_limit=Q3+(1.5*IQR)
df=df[~(df['bmi'] < lower_limit) | (df['bmi'] > upper_limit)]


Q1=df['charges'].quantile(0.25)
Q3=df['charges'].quantile(0.75)
IQR=Q3-Q1
lower_limit=Q1-(1.5*IQR)
upper_limit=Q3+(1.5*IQR)
df=df[~(df['charges'] < lower_limit) | (df['charges'] > upper_limit)]

print(df)

#Data Vizualisation
sns.boxplot(df)

#Encoding Categorical Data
lb=LabelEncoder()
df['sex']=lb.fit_transform(df['sex'])
df['smoker']=lb.fit_transform(df['smoker'])
df['region']=lb.fit_transform(df['region'])
print(df.head)

#Cleaning Data
#Counting null values
n=df.isnull().sum()
print('\nNull value count: ',n)

#Dropping duplicate rows
df=df.drop_duplicates()

#Dropping entire row if it has null value
df=df.dropna()

print(df)

#Data splitting
x=df.drop(columns=['charges'])
y=df['charges']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

#Model Development and training
ml=LinearRegression()
fit=ml.fit(x_train,y_train)
op=ml.predict(x_test)
print(op)

#Model Evaluation
r=r2_score(y_test,op)
mse=mean_squared_error(y_test,op)
rmse=np.sqrt(mean_squared_error(y_test,op))
print('Mean Squared Error:',mse)
print('\nR-squared: ', r)
print('\nRMSE: ', rmse)