# -*- coding: utf-8 -*-
"""lvadsusr79_ChrisSasanDoss_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sKCJxGKfXegzl0N7EmIWR_EGhNCM6rBm
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import precision_score, recall_score, f1_score,confusion_matrix

df=pd.read_csv('/content/booking.csv')

#Printing columns of dataset
print('Columns: ',df.columns)

#Printing head of dataset
print('\nHead: ',df.head)

#Printing tail of dataset
print('\nTail: ',df.tail)

#Counting null values
n=df.isnull().sum()
print('\nNull value count: ',n)

#Dropping duplicate rows
df=df.drop_duplicates()

#Removing outliers
Q1=df['lead time'].quantile(0.25)
Q3=df['lead time'].quantile(0.75)
IQR=Q3-Q1
lower_limit=Q1-(1.5*IQR)
upper_limit=Q3+(1.5*IQR)
df=df[~(df['lead time'] < lower_limit) | (df['lead time'] > upper_limit)]


Q1=df['average price'].quantile(0.25)
Q3=df['average price'].quantile(0.75)
IQR=Q3-Q1
lower_limit=Q1-(1.5*IQR)
upper_limit=Q3+(1.5*IQR)
df=df[~(df['average price'] < lower_limit) | (df['average price'] > upper_limit)]

#Data Vizualisation
plt.figure(figsize=[20,20])
sns.boxplot(df)

#Encoding Categorical Data
lb=LabelEncoder()
df['room type']=lb.fit_transform(df['room type'])
df['type of meal']=lb.fit_transform(df['type of meal'])
df['booking status']=lb.fit_transform(df['booking status'])
df['market segment type']=lb.fit_transform(df['market segment type'])
print(df.head)

#Cleaning Data
#Counting null values
n=df.isnull().sum()
print('\nNull value count: ',n)

#Dropping duplicate rows
df=df.drop_duplicates()

#Dropping entire row if it has null value
df=df.dropna()

print(df)

#Data splitting
x=df.drop(columns=['Booking_ID','booking status','date of reservation'])
y=df['booking status']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

#Model Development and training
ml=DecisionTreeClassifier()
fit=ml.fit(x_train,y_train)
op=ml.predict(x_test)
print(op)

#Model evaluation
acc=accuracy_score(y_test,op)
print('Accuracy: ',acc)
p=precision_score(y_test,op)
print('\nPrecision Score: ',p)
r=recall_score(y_test,op)
print('\nRecall Score: ',r)
f=f1_score(y_test,op)
print('\nF1 Score: ',f)
c=confusion_matrix(y_test,op)
print('\nConfusion Matrix: ',c)