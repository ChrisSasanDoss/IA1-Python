# -*- coding: utf-8 -*-
"""lvadudsr_79_ ChrisSasanDoss_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y3BNQDMwSL_NEn-MnTY4j6zfWYHQQYPE
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans

"""Handle missing values and outliers"""

df_raw=pd.read_csv('/content/winequality-red.csv')
print('Head: \n',df_raw.head())
print('Tail: \n',df_raw.tail())
print('Column Names: \n',df_raw.columns)

print('Null Values: \n',df_raw.isnull().sum())

df=df_raw.fillna(method='ffill')

print(df)
plt.figure(figsize=(20, 20))
sns.boxplot(df)

plt.show()

#Removing Outliers for Residual sugar
q1=df['residual sugar'].quantile(0.25)
q3=df['residual sugar'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['residual sugar']>l_limit) & (df['residual sugar']<u_limit)]

#Removing Outliers for free sulfur dioxide
q1=df['free sulfur dioxide'].quantile(0.25)
q3=df['free sulfur dioxide'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['free sulfur dioxide']>l_limit) & (df['free sulfur dioxide']<u_limit)]

#Removing outliers for total sulfur dioxide
q1=df['total sulfur dioxide'].quantile(0.25)
q3=df['total sulfur dioxide'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['total sulfur dioxide']>l_limit) & (df['total sulfur dioxide']<u_limit)]

q1=df['fixed acidity'].quantile(0.25)
q3=df['fixed acidity'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['fixed acidity']>l_limit) & (df['fixed acidity']<u_limit)]

print(df)

"""Data Transformation"""

df['Target']='Good'
df.loc[(df['quality']>=3) & (df['quality']<=6),'Target']='Bad'
print(df)

"""Encoding and balancing data"""

lb=LabelEncoder()
df['Target']=lb.fit_transform(df['Target'])
print(df)

"""Feature selection and data cleaning"""

#Dropping duplicates
print('Null Values: \n',df.isnull().sum())
df=df.drop_duplicates()
print(df)

#Feature Selection
x=df.drop(columns=['Target'])
y=df['Target']

"""Data Splitting"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

"""Model Development"""

#Model:Random Forest
ml=RandomForestClassifier()
fit=ml.fit(x_train,y_train)
op=ml.predict(x_test)
print(op)

"""Model Evaluation"""

acc=accuracy_score(y_test,op)
p=precision_score(y_test,op)
f=f1_score(y_test,op)
r=recall_score(y_test,op)
c=confusion_matrix(y_test,op)
print('Accuracy Score: ',acc)
print('\nPrecision Score: ',p)
print('\nF1 Score: ',f)
print('\nRecall Score: ',r)
print('\nConfusion Matrix: ',c)