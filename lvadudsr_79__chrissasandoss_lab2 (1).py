# -*- coding: utf-8 -*-
"""lvadudsr_79_ ChrisSasanDoss_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sDlCWtEHHOnMhXRQnkA-9AxckhxEwCHf
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans

"""Data Exploration and Preprocessing"""

#Handling missing values
df_raw=pd.read_csv('/content/Mall_Customers.csv')
print('Head: \n',df_raw.head())
print('Tail: \n',df_raw.tail())
print('Column Names: \n',df_raw.columns)

print('Null Values: \n',df_raw.isnull().sum())

df=df_raw.drop_duplicates()
df=df.fillna(method='ffill')
print(df_raw)

#Normalization
scaler=MinMaxScaler()
cs=['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
df[cs]=scaler.fit_transform(df[cs])
print(df)

#Feature Engineering
gi=df.groupby('Gender')['Spending Score (1-100)'].sum()
plt.pie(gi,labels=gi.index, autopct='%1.1f%%')
plt.title('Gender vs Spendig Score')
plt.show()

plt.figure(figsize=(20,20))
sns.barplot(x=df_raw['Age'],y=df_raw['Annual Income (k$)'])
plt.title('Age vs Income')
plt.show()

correlation=df.corr()
print(correlation)
sns.heatmap(correlation,annot=True)

"""Optimal Number of Cluster Determination"""

x=df[['Annual Income (k$)','Spending Score (1-100)']]
l=[]
s=[]
for k in range(1, 11):
    ml=KMeans(n_clusters=k)
    fit=ml.fit_predict(x)
    l.append(ml.inertia_)
plt.plot(range(1,11),l,marker='o')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.title('Inertia Score')

"""Clustering ALgorithm Application"""

ml=KMeans(n_clusters=5)
fit=ml.fit_predict(df[['Annual Income (k$)','Spending Score (1-100)']])

"""Cluster Analysis"""

labels=ml.labels_
centroids=ml.cluster_centers_
plt.scatter(df['Annual Income (k$)'],df['Spending Score (1-100)'],c=labels)
plt.scatter(centroids[:,0],centroids[:,1])
plt.title('Cluster Representation')

s=silhouette_score(x,labels)
d= davies_bouldin_score(x,labels)
c= calinski_harabasz_score(x,labels)
print('silhouette_score: ',s)
print('davies_bouldin_score:',d)
print('calinski_harabasz_score:',c)

"""Strategy Development Based on Clusters

These clusters can be used to segmenthigh value to low value customers and use create marketing strategies accordingly.
"""